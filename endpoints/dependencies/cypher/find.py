#########################################################
# find graph elements
#########################################################

def graph_find_elements_id(tx, nodes, edges, skip, limit):
    c = []
    c.append("MATCH (a) WHERE ID(a) IN $nodes")
    if edges is not None:
        c.append("OPTIONAL MATCH (a)-[r]-() WHERE ID(r) IN $edges")
    c.append("RETURN a")
    if edges is not None:
        c.append(", r")
    c.append("SKIP $skip")
    c.append("LIMIT $limit")
    return tx.run(" ".join(c), nodes=nodes, edges=edges, skip=skip, limit=limit).graph()

def graph_find_elements_uuid(tx, nodes, edges, skip, limit):
    c = []
    c.append("OPTIONAL MATCH (ad:Ad) WHERE ad.uuid in $nodes")
    c.append("WITH collect(ad) AS nodes")
    c.append("OPTIONAL MATCH (annotation:Annotation) WHERE annotation.uuid in $nodes")
    c.append("WITH collect(annotation) AS nodes")
    c.append("OPTIONAL MATCH (buyer:Buyer) WHERE buyer.uuid in $nodes")
    c.append("WITH collect(buyer) + nodes AS nodes")
    c.append("OPTIONAL MATCH (candidate:Candidate) WHERE candidate.uuid in $nodes")
    c.append("WITH collect(candidate) + nodes AS nodes")
    c.append("OPTIONAL MATCH (committee:Committee) WHERE committee.uuid in $nodes")
    c.append("WITH collect(committee) + nodes AS nodes")
    c.append("OPTIONAL MATCH (contribution:Contribution) WHERE contribution.uuid in $nodes")
    c.append("WITH collect(contribution) + nodes AS nodes")
    c.append("OPTIONAL MATCH (day:Day) WHERE day.uuid in $nodes")
    c.append("WITH collect(day) + nodes AS nodes")
    c.append("OPTIONAL MATCH (domain:Domain) WHERE domain.uuid in $nodes")
    c.append("WITH collect(domain) + nodes AS nodes")
    c.append("OPTIONAL MATCH (donor:Donor) WHERE donor.uuid in $nodes")
    c.append("WITH collect(donor) + nodes AS nodes")
    c.append("OPTIONAL MATCH (employer:Employer) WHERE employer.uuid in $nodes")
    c.append("WITH collect(employer) + nodes AS nodes")
    c.append("OPTIONAL MATCH (expenditure:Expenditure) WHERE expenditure.uuid in $nodes")
    c.append("WITH collect(expenditure) + nodes AS nodes")
    c.append("OPTIONAL MATCH (hashtag:Hashtag) WHERE hashtag.uuid in $nodes")
    c.append("WITH collect(hashtag) + nodes AS nodes")
    c.append("OPTIONAL MATCH (job:Job) WHERE job.uuid in $nodes")
    c.append("WITH collect(job) + nodes AS nodes")
    c.append("OPTIONAL MATCH (link:Link) WHERE link.uuid in $nodes")
    c.append("WITH collect(link) + nodes AS nodes")
    c.append("OPTIONAL MATCH (message:Message) WHERE message.uuid in $nodes")
    c.append("WITH collect(message) + nodes AS nodes")
    c.append("OPTIONAL MATCH (month:Month) WHERE month.uuid in $nodes")
    c.append("WITH collect(month) + nodes AS nodes")
    c.append("OPTIONAL MATCH (page:Page) WHERE page.uuid in $nodes")
    c.append("WITH collect(page) + nodes AS nodes")
    c.append("OPTIONAL MATCH (party:Party) WHERE party.uuid in $nodes")
    c.append("WITH collect(party) + nodes AS nodes")
    c.append("OPTIONAL MATCH (payee:Payee) WHERE payee.uuid in $nodes")
    c.append("WITH collect(payee) + nodes AS nodes")
    c.append("OPTIONAL MATCH (race:Race) WHERE race.uuid in $nodes")
    c.append("WITH collect(race) + nodes AS nodes")
    c.append("OPTIONAL MATCH (source:Source) WHERE source.uuid in $nodes")
    c.append("WITH collect(source) + nodes AS nodes")
    c.append("OPTIONAL MATCH (state:State) WHERE state.uuid in $nodes")
    c.append("WITH collect(state) + nodes AS nodes")
    c.append("OPTIONAL MATCH (tweet:Tweet) WHERE tweet.uuid in $nodes")
    c.append("WITH collect(tweet) + nodes AS nodes")
    c.append("OPTIONAL MATCH (tweeter:Tweeter) WHERE tweeter.uuid in $nodes")
    c.append("WITH collect(tweeter) + nodes AS nodes")
    c.append("OPTIONAL MATCH (year:Year) WHERE year.uuid in $nodes")
    c.append("WITH collect(year) + nodes AS nodes")
    c.append("OPTIONAL MATCH (zip:Zip) WHERE zip.uuid in $nodes")
    c.append("WITH collect(zip) + nodes AS nodes")
    c.append("UNWIND nodes AS x")
    if edges is not None:
        c.append("OPTIONAL MATCH (x)-[r]-() WHERE r.uuid IN $edges")
    c.append("RETURN x")
    if edges is not None:
        c.append(", r")
    c.append("SKIP $skip")
    c.append("LIMIT $limit")
    return tx.run(" ".join(c), nodes=nodes, edges=edges, skip=skip, limit=limit).graph()
